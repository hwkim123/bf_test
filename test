set -euo pipefail

# === 기본 준비 ===
if ! command -v docker >/dev/null 2>&1; then
  echo "[+] Docker 설치 중..."
  sudo apt-get update -y
  sudo apt-get install -y ca-certificates curl gnupg lsb-release
  sudo install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo $VERSION_CODENAME) stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
  sudo apt-get update -y
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
fi

# 도커가 루트 없이도 동작하도록(선택)
if ! id -nG "$USER" | grep -qw docker; then
  echo "[+] 사용자(${USER})를 docker 그룹에 추가합니다 (로그아웃/로그인 후 반영)."
  sudo usermod -aG docker "$USER" || true
fi

# 작업 폴더
WORKDIR="$HOME/bf-demo"
mkdir -p "$WORKDIR"
cd "$WORKDIR"

# === 1) Batfish 서버 실행 (all-in-one 컨테이너) ===
echo "[+] Batfish 컨테이너 실행..."
docker pull batfish/allinone
# 이미 떠 있으면 건너뛰기
if ! docker ps -a --format '{{.Names}}' | grep -q '^batfish$'; then
  docker run -d --name batfish \
    --restart unless-stopped \
    -v batfish-data:/data \
    -p 8888:8888 -p 9997:9997 -p 9996:9996 \
    batfish/allinone
else
  docker start batfish >/dev/null
fi

# API 헬스체크(간단포트 체크)
echo "[+] Batfish 포트 확인(9996/9997)..."
sleep 2
(</dev/tcp/127.0.0.1/9996) >/dev/null 2>&1 || { echo "[-] 9996 포트가 열려있지 않습니다."; exit 1; }
(</dev/tcp/127.0.0.1/9997) >/dev/null 2>&1 || { echo "[-] 9997 포트가 열려있지 않습니다."; exit 1; }

# === 2) PyBatfish 예시 실행 ===
echo "[+] Python 가상환경 및 의존성 설치..."
sudo apt-get update -y
sudo apt-get install -y python3-venv python3-pip

python3 -m venv .venv
# shellcheck disable=SC1091
source .venv/bin/activate
pip install --upgrade pip
pip install pybatfish pandas

# 샘플 네트워크 받기(공식 batfish repo 의 networks/ 폴더)
if [ ! -d batfish ]; then
  git clone --depth 1 https://github.com/batfish/batfish.git
fi

mkdir -p "$WORKDIR/scripts" "$WORKDIR/outputs"

cat > "$WORKDIR/scripts/bf_demo.py" <<'PY'
import os
from pybatfish.client.session import Session
from pybatfish.datamodel.flow import HeaderConstraints

os.makedirs("outputs", exist_ok=True)

bf = Session(host="localhost")  # Batfish all-in-one 컨테이너에 연결 (9996/9997)
NETWORK_NAME = "example_network"
SNAPSHOT_NAME = "example_snapshot"
SNAPSHOT_PATH = os.path.abspath("batfish/networks/example")

bf.set_network(NETWORK_NAME)
bf.init_snapshot(SNAPSHOT_PATH, name=SNAPSHOT_NAME, overwrite=True)

# 기본 질의 몇 가지 실행 및 저장
parse_status = bf.q.fileParseStatus().answer().frame()
parse_status.to_csv("outputs/parse_status.csv", index=False)

node_props = bf.q.nodeProperties().answer().frame()
node_props.to_csv("outputs/node_properties.csv", index=False)

l3_edges = bf.q.layer3Edges().answer().frame()
l3_edges.to_csv("outputs/l3_edges.csv", index=False)

tr = bf.q.traceroute(startLocation="host1",
                     headers=HeaderConstraints(dstIps="1.0.2.2")).answer().frame()
tr.to_csv("outputs/traceroute.csv", index=False)

print("[OK] PyBatfish 예시 실행 완료. outputs/*.csv 를 확인하세요.")
PY

echo "[+] PyBatfish 예시 실행..."
python "$WORKDIR/scripts/bf_demo.py"

# === 3) batfish_dashboard 빌드 & 실행 ===
echo "[+] batfish_dashboard 가져오기 & 빌드..."
if [ ! -d batfish_dashboard ]; then
  git clone --depth 1 https://github.com/drosarius/batfish_dashboard.git
fi
cd batfish_dashboard
docker build -t batfish_dashboard:latest .

# Linux에서 컨테이너가 'localhost:9996'에 접근하도록 --network=host 권장
# (Mac/Windows는 host 네트워크 불가 -> 아래 주석 참고)
echo "[+] batfish_dashboard 실행 (http://<서버IP>:8050)..."
if [ "$(uname -s)" = "Linux" ]; then
  docker run --rm --network=host --name bf-dash batfish_dashboard:latest >/dev/null 2>&1 &
else
  # Mac/Windows 대안: host.docker.internal을 호스트로 주입
  docker run --rm -p 8050:8050 \
    --add-host host.docker.internal:host-gateway \
    --name bf-dash batfish_dashboard:latest >/dev/null 2>&1 &
fi

echo
echo "[완료] 브라우저에서 접속:"
ip -o -4 addr show | awk '/scope global/ {gsub(/\/.*/,"",$4); print "  -> http://" $4 ":8050"}' | head -n 1
echo "  (또는 서버IP:8050)"
echo
echo "[체크] CSV 결과: $WORKDIR/outputs/*.csv"
